<%-
DbVersion = p("mongodb.db_version")
DbToolVersion = p("mongodb.db_tool_version")

Conf_bindIp = "127.0.0.1," + link('server').instances[spec.index].address

# Managed the mongodb port binding depending on the mongodb role
if p("mongodb.node_role") == "rs"
  DbTypeport=p("mongodb.rs_port")
  _rsconfig = ''
  link('server').instances.each do |instance|
     _rsconfig = "#{_rsconfig}#{instance.address}:#{DbTypeport},"
  end
  # remove last ,
  rsconfig = _rsconfig[0..-2]
end
if p("mongodb.node_role") == "sh"
  DbTypeport=p("mongodb.sh_port")
end
if p("mongodb.node_role") == "cfg"
  DbTypeport=p("mongodb.cfg_port")
end
if p("mongodb.node_role") == "mongos"
  DbTypeport=p("mongodb.mongos_port")
end

# Retrieve all parts of the Mongodb version
/(?<_DbVersionMaj>\d+)\.(?<_DbVersionMid>\d+)\.(?<_DbVersionMin>\d+)/ =~ p("mongodb.db_version") #=> 0

DbVersionMaj = _DbVersionMaj
DbVersionMid = _DbVersionMid
DbVersionMin = _DbVersionMin

# Mongodb orange products parameters
DbProductName = "mongodb-cf-release"
#DbPymongoName: mongodb-orange-python-pymongo
#DbToolName: mongodb-orange-tools
# Mongodb directory
Sys_Db_dirRoot="/var/vcap/store/mongodb-server"
Sys_Db_dirCfg="/var/vcap/jobs/mongodb-server/config"
Sys_Db_dirSSL="/var/vcap/jobs/mongodb-server/ssl"
Sys_Db_dirData="/var/vcap/store/mongodb-server/data"
Sys_Db_dirLog="/var/vcap/sys/log/mongodb-server"
Sys_Db_dirRun="/var/vcap/sys/run/mongodb-server"
Sys_Db_dirManaged = [ Sys_Db_dirRoot, Sys_Db_dirCfg, Sys_Db_dirData, Sys_Db_dirLog, Sys_Db_dirRun ]
# Mongodb configuration parameters
Conf_systemLog = Sys_Db_dirLog + "/mongod.log"
#Conf_cfgFile = SysDb_dirCfg + "/mongod.conf"
#Conf_pidFile = SysDb_dirRun + "/mongod.pid"
Conf_port = DbTypeport
Conf_keyFile = Sys_Db_dirCfg + "/keyfile"
Conf_PEMKeyFile = Sys_Db_dirSSL + "/server.pem"
Conf_CAFile = Sys_Db_dirSSL + "/mongodb.ca"

storage_journal_enabled = "true"
storage_mmap_v1_small_files = p("mongodb.mmap_v1_small_files")
replication_oplog_size_mb = p("mongodb.replication.operation_log_max_size_mb")

if_p("arbiter_only") do
  if p("arbiter_only") == "yes"
    storage_journal_enabled = "false"
    storage_mmap_v1_small_files = "true"
    replication_oplog_size_mb = 1
  end
end
-%>
systemLog:
  destination: file
  path: <%= Conf_systemLog %>
  logAppend: true
<%- if DbVersionMaj == "3" -%>
  logRotate: reopen
<%- end -%>
storage:
<%- if DbVersionMaj == "2" -%>
  dbPath: <%= Sys_Db_dirData %>
  directoryPerDB: true
	<% if_p("Conf_syncPeriodSecs") do %>
  syncPeriodSecs: <%= Conf_syncPeriodSecs %>
	<%- end -%>
  journal:
    enabled: <%= storage_journal_enabled %>
  <% if_p("Conf_commitIntervalMs") do %>
    commitIntervalMs: <%= Conf_commitIntervalMs %>
	<%- end -%>
  smallFiles: <%= storage_mmap_v1_small_files %>
<%- end -%>
<%- if DbVersionMaj == "3" -%>
  engine: <%= p("mongodb.storage_engine") %>
  dbPath: <%= Sys_Db_dirData %>
  directoryPerDB: true
  journal:
    enabled: <%= storage_journal_enabled %>
	<%- if_p("Conf_commitIntervalMs") do -%>
		<% if DbVersionMid == "2" or DbVersionMid == "4" -%>
    commitIntervalMs: <%= Conf_commitIntervalMs %>
		<%- end -%>
	<%- end -%>
	<%- if p("mongodb.storage_engine") == "mmapv1" -%>
  mmapv1:
    smallFiles: <%= storage_mmap_v1_small_files %>
		<% if_p("Conf_mmapv1_preallocDataFiles") do -%>
    preallocDataFiles: <%= Conf_mmapv1_preallocDataFiles %>
		<%- end -%>
		<% if_p("Conf_mmapv1_nsSize") do -%>
    nsSize: <%= Conf_mmapv1_nsSize %>
		<%- end -%>
		<%- if_p("Conf_mmapv1_quota_enforced","Conf_mmapv1_quota_maxFilesPerDB") do -%>
    quota:
			<%- if_p("Conf_mmapv1_quota_enforced") do -%>
      enforced: <%= Conf_mmapv1_quota_enforced %>
			<%- end -%>
			<%- if_p("Conf_mmapv1_quota_maxFilesPerDB") do -%>
      maxFilesPerDB: <%= Conf_mmapv1_quota_maxFilesPerDB %>
			<%- end -%>
		<%- end -%>
	<%- end -%>
	<%- if_p("Conf_commitIntervalMs") do -%>
		<%- if DbVersionMid == "0" -%>
    journal:
      commitIntervalMs: <%= Conf_commitIntervalMs %>
		<%- end -%>
	<%- end -%>
	<%- if p("mongodb.storage_engine") == "wiredTiger" -%>
  wiredTiger:
    engineConfig:
      directoryForIndexes: true
		<%- if_p("mongodb.wired_tiger_cache_size_gb") do -%>
      cacheSizeGB: <%= p("mongodb.wired_tiger_cache_size_gb") %>
		<%- end -%>
		<%- if_p("Conf_wiredTiger_journalCompressor") do -%>
      journalCompressor: <%= Conf_wiredTiger_journalCompressor %>
		<%- end -%>
		<%- if_p("Conf_wiredTiger_blockCompressor") do -%>
    collectionConfig:
			blockCompressor: <%= Conf_wiredTiger_blockCompressor %>
		<%- end -%>
		<%- if_p("Conf_wiredTiger_prefixCompression") do -%>
    indexConfig:
			prefixCompression: <%= Conf_wiredTiger_prefixCompression %>
		<%- end -%>
	<%- end -%>
<%- end -%>
processManagement:
  fork: true
net:
  bindIp: <%= Conf_bindIp %>
  port: <%= Conf_port %>
  unixDomainSocket:
    enabled: true
    pathPrefix: <%= Sys_Db_dirRun %>
<%- if p("mongodb.require_ssl") == 1 -%>
  ssl:
    mode: requireSSL
    PEMKeyFile: <%= Conf_PEMKeyFile %>
    CAFile: <%= Conf_CAFile %>
    allowConnectionsWithoutCertificates: true
    allowInvalidHostnames: true
<%- end -%>
operationProfiling:
  slowOpThresholdMs: <%= p("mongodb.slow_query_threshold_ms") %>
<%- if p("mongodb.replication.enable") == 1 -%>
replication:
  replSetName: <%= p("mongodb.replication.replica_set_name") %>
  oplogSizeMB: <%= replication_oplog_size_mb %>
<%- end -%>
setParameter:
  enableLocalhostAuthBypass: 1