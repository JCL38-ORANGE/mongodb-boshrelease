<%-
# Mongodb version
DbVersion = p("mongodb-server.Db_Version") 
DbToolVersion = p("mongodb-server.Db_Tool_Version")
#Function of the mongod server
DbType = p("mongodb-server.Db_Type") 
# Authorize the role to restart the server (don't work with a proxy_ssh)
SysReboot = p("mongodb-server.Sys_Reboot")
# Mongodb logrotate
SysLogrotate = p("mongodb-server.Sys_Logrotate")
# mongodb storage engine part
Conf_engine = "wiredTiger" #default engine if not defined 
if_p("mongodb-server.Conf_engine") do 
  Conf_engine = p("mongodb-server.Conf_engine") 
end 
Conf_mmapv1smallFiles = p("mongodb-server.Conf_mmapv1smallFiles")
# NOT CONFIGURED by default but can be set to minimize the wiredTiger cache
# DEPRECATED
# Conf_wiredTigercacheSizeGB: <%#= p("mongodb-server.Conf_wiredTigercacheSizeGB")
Conf_slowOpThresholdMs = p("mongodb-server.Conf_slowOpThresholdMs")
# mongodb replication part
Conf_replication = p("mongodb-server.Conf_replication")
Conf_replSetName = p("mongodb-server.Conf_replSetName")
Conf_oplogSizeMB = p("mongodb-server.Conf_oplogSizeMB")
# mongodb Auth part
Conf_authorization = p("mongodb-server.Conf_authorization")
DbUserAdminName = p("mongodb-server.Db_UserAdminName")
DbUserAdminPwd = p("mongodb-server.Db_UserAdminPwd")
DbRootAdminName = p("mongodb-server.Db_RootAdminName")
DbRootAdminPwd = p("mongodb-server.Db_RootAdminPwd")
Confssl = p("mongodb-server.Conf_UseSSL")
#DbManagedUsers: <%#= p("mongodb-server.DbManagedUsers")
#################################################################################################
# Set default value if not defined in the playbook vars / group_vars / host_vars / inventory vars
# Do not touch below
#################################################################################################
# Mongodb mongod operator
Operator = p("mongodb-server.operator") 
# Mongodb mongod list
Conf_bindIp = "127.0.0.1," + link('server').instances[spec.index].address
# Conf_bindIp = "127.0.0.1," + p("mongodb-server.spec.ip")
# Mongodb mongod state:
State = p("mongodb-server.state")
# Mongodb backup state:
Backup = p("mongodb-server.backup")
# Mongodb alias name used for the replica set communication
#_hostname: = p("mongodb-server._hostname") 
# Mongodb backup key file name (stored on the same level as playbook)
#Conf_keyfileBackup = p("mongodb-server.Conf_keyfileBackup")
# Add tag to the modified line (by ansible tasks)
RoleComment= "#BOSH orange.mongodb role comment#"

# Managed the mongodb port binding depending on the mongodb role
if p("mongodb-server.Db_Type") == "rs" 
  DbTypeport=p("mongodb-server.rs_port") 
  _rsconfig = ''
  link('server').instances.each do |instance| 
     _rsconfig = "#{_rsconfig}#{instance.address}:#{DbTypeport}," 
  end
  # remove last ,
  rsconfig = _rsconfig[0..-2]
end
if p("mongodb-server.Db_Type") == "sh" 
  DbTypeport=p("mongodb-server.sh_port") 
end
if p("mongodb-server.Db_Type") == "cfg"
  DbTypeport=p("mongodb-server.cfg_port")
end
if p("mongodb-server.Db_Type") == "mongos" 
  DbTypeport=p("mongodb-server.mongos_port")
end

# Retrieve all parts of the Mongodb version 
/(?<_DbVersionMaj>\d+)\.(?<_DbVersionMid>\d+)\.(?<_DbVersionMin>\d+)/ =~ p("mongodb-server.Db_Version") #=> 0 

DbVersionMaj = _DbVersionMaj 
DbVersionMid = _DbVersionMid
DbVersionMin = _DbVersionMin

# Mongodb orange products parameters
DbProductName = "mongodb-cf-release"
#DbPymongoName: mongodb-orange-python-pymongo
#DbToolName: mongodb-orange-tools
Sys_DbUser = Operator
Sys_DbGroup = Operator
# Mongodb directory
Sys_Db_dirRoot="/var/vcap/store/mongodb-server" 
Sys_Db_dirBackup="/var/vcap/store/mongodb-server/backup" 
Sys_Db_dirCfg="/var/vcap/jobs/mongodb-server/config"
Sys_Db_dirSSL="/var/vcap/jobs/mongodb-server/ssl" 
Sys_Db_dirData="/var/vcap/store/mongodb-server/data" 
Sys_Db_dirLog="/var/vcap/sys/log/mongodb-server"
Sys_Db_dirRun="/var/vcap/sys/run/mongodb-server"
Sys_Db_dirManaged=[ Sys_Db_dirRoot ,  Sys_Db_dirBackup , Sys_Db_dirCfg , Sys_Db_dirData , Sys_Db_dirLog , Sys_Db_dirRun ]
# Mongodb configuration parameters
Conf_systemLog = Sys_Db_dirLog + "/mongod.log"
#Conf_cfgFile = SysDb_dirCfg + "/mongod.conf"
#Conf_pidFile = SysDb_dirRun + "/mongod.pid"
Conf_port = DbTypeport
Conf_journalenabled = "true"
Conf_keyFile = Sys_Db_dirCfg + "/keyfile"
Conf_PEMKeyFile = Sys_Db_dirSSL + "/server.pem"
Conf_CAFile = Sys_Db_dirSSL + "/mongodb.ca"
#Conf_mmapv1smallFiles = "false" #<= deprecated
tmpjournalenabled = Conf_journalenabled
tmpoplogSizeMB = Conf_oplogSizeMB

if_p("Conf_mmapv1smallFiles") do 
  tmpsmallFiles = Conf_mmapv1smallFiles 
end 
_arbiter_only = 0 
if_p("arbiter_only") do 
   if p("arbiter_only") == "yes"
    _arbiter_only = 1 
   end 
end 
if _arbiter_only = 1 
      tmpjournalenabled = "false"
      tmpsmallFiles = "true"
      tmpoplogSizeMB = 1 
end -%>
systemLog:
  destination: file
  path: <%= Conf_systemLog %>
  logAppend: true
<%- if DbVersionMaj == "3" -%>
  logRotate: reopen
<%- end -%>
storage:
<%- if DbVersionMaj == "2" -%>
  dbPath: <%= Sys_Db_dirData %>
  directoryPerDB: true
	<% if_p("Conf_syncPeriodSecs") do %>
  syncPeriodSecs: <%= Conf_syncPeriodSecs %>
	<%- end -%>
  journal:
    enabled: <%= tmpjournalenabled %>
 	<% if_p("Conf_commitIntervalMs") do %>
    commitIntervalMs: <%= Conf_commitIntervalMs %>
	<%- end -%>
  smallFiles: <%= tmpsmallFiles %>
<%- end -%>
<%- if DbVersionMaj == "3" -%>
  engine: <%= Conf_engine %>
  dbPath: <%= Sys_Db_dirData %>
  directoryPerDB: true
  journal:
    enabled: <%= tmpjournalenabled %>
	<%- if_p("Conf_commitIntervalMs") do -%>
		<% if DbVersionMid == "2" or DbVersionMid == "4" -%>
    commitIntervalMs: <%= Conf_commitIntervalMs %>
		<%- end -%>
	<%- end -%>
	<%- if Conf_engine == "mmapv1" -%>
  mmapv1:
    smallFiles: <%= tmpsmallFiles %>
		<% if_p("Conf_mmapv1_preallocDataFiles") do -%>
    preallocDataFiles: <%= Conf_mmapv1_preallocDataFiles %>
		<%- end -%>
		<% if_p("Conf_mmapv1_nsSize") do -%>
    nsSize: <%= Conf_mmapv1_nsSize %>
		<%- end -%>
		<%- if_p("Conf_mmapv1_quota_enforced","Conf_mmapv1_quota_maxFilesPerDB") do -%>
    quota:
			<%- if_p("Conf_mmapv1_quota_enforced") do -%>
      enforced: <%= Conf_mmapv1_quota_enforced %>
			<%- end -%>
			<%- if_p("Conf_mmapv1_quota_maxFilesPerDB") do -%>
      maxFilesPerDB: <%= Conf_mmapv1_quota_maxFilesPerDB %>
			<%- end -%>
		<%- end -%>	
	<%- end -%>
	<%- if_p("Conf_commitIntervalMs") do -%>
		<%- if DbVersionMid == "0" -%>
    journal:
      commitIntervalMs: <%= Conf_commitIntervalMs %>
		<%- end -%>
	<%- end -%>
	<%- if Conf_engine == "wiredTiger" -%>
  wiredTiger:
    engineConfig:
      directoryForIndexes: true
		<%- if_p("Conf_wiredTiger_cacheSizeGB") do -%>
      cacheSizeGB: <%= Conf_wiredTiger_cacheSizeGB %>
		<%- end -%>
		<%- if_p("Conf_wiredTiger_journalCompressor") do -%>
      journalCompressor: <%= Conf_wiredTiger_journalCompressor %>
		<%- end -%>
		<%- if_p("Conf_wiredTiger_blockCompressor") do -%>
    collectionConfig:
			blockCompressor: <%= Conf_wiredTiger_blockCompressor %>
		<%- end -%>
		<%- if_p("Conf_wiredTiger_prefixCompression") do -%>
    indexConfig:
			prefixCompression: <%= Conf_wiredTiger_prefixCompression %>
		<%- end -%>
	<%- end -%>
<%- end -%>
processManagement:
  fork: true
net:
  bindIp: <%= Conf_bindIp %>
  port: <%= Conf_port %>
  unixDomainSocket:
    enabled: true
    pathPrefix: <%= Sys_Db_dirRun %>
<%- if Confssl == 1 -%>   
  ssl:
    mode: requireSSL
    PEMKeyFile: <%= Conf_PEMKeyFile %>
    CAFile: <%= Conf_CAFile %>
    allowConnectionsWithoutCertificates: true
    allowInvalidHostnames: true
<%- end -%>          
<%- if Conf_authorization == 1 -%>
<%- end -%>
operationProfiling:
  slowOpThresholdMs: <%= Conf_slowOpThresholdMs %>
<%- if Conf_replication == 1 -%>
replication:
  replSetName: <%= Conf_replSetName %>
  oplogSizeMB: <%= tmpoplogSizeMB %>
<%- end -%>
setParameter:
  enableLocalhostAuthBypass: 1